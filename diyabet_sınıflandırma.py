# -*- coding: utf-8 -*-
"""Diyabet Sınıflandırma.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NwaUU2jgpYbXd6hukrCCAMkNq9HsnG5S
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from imblearn.over_sampling import ADASYN
import matplotlib.pyplot as plt
from sklearn.metrics import ConfusionMatrixDisplay

import pandas as pd

# Veri setini yeniden yükle
df = pd.read_csv("Diabetes Classification.csv.txt")

# Güncellenmiş veri setini kontrol et
print(df.head())

# Veri setinin boyutunu yazdır
print(f"Veri setinin boyutu: {df.shape}")
print(df.head(10))

print(df.isnull().sum())

print(df.dtypes)

labels = ['Teşhisli', 'Teşhissiz']
sizes = [df['Diagnosis'].value_counts()[1], df['Diagnosis'].value_counts()[0]]
colors = ['#ff9999','#66b3ff']
explode = (0.1, 0)  # Pasta dilimlerini ayırmak için

plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)
plt.axis('equal')  # Eşit eksen oranı, pasta grafiğini daire şeklinde yapar
plt.title("Diyabet Teşhisi Dağılımı")
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Nokta grafiği oluştur
plt.figure(figsize=(10, 6))
sns.scatterplot(data=df, x='Age', y='BMI', hue='Diagnosis', palette='coolwarm')
plt.title("Yaş ve BMI İlişkisi (Teşhisli ve Teşhissiz)")
plt.xlabel("Yaş")
plt.ylabel("BMI")
plt.legend(title='Diagnosis', loc='upper right', labels=['Teşhissiz', 'Teşhisli'])
plt.show()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report

# Veri setini yükle
data1 = pd.read_csv("Diabetes Classification.csv.txt")

# Kategorik verileri sayısal verilere dönüştür
data1['Gender'] = data1['Gender'].map({'Male': 0, 'Female': 1})
data1['Blood Pressure'] = data1['Blood Pressure'].map({'Low': 0, 'Normal': 1, 'High': 2})
data1['Family History of Diabetes'] = data1['Family History of Diabetes'].map({'No': 0, 'Yes': 1})
data1['Smoking'] = data1['Smoking'].map({'No': 0, 'Yes': 1})
data1['Diet'] = data1['Diet'].map({'Poor': 0, 'Healthy': 1})
data1['Exercise'] = data1['Exercise'].map({'No': 0, 'Regular': 1})
data1['Diagnosis'] = data1['Diagnosis'].map({'No': 0, 'Yes': 1})

# Bağımlı değişken (y) olarak Diagnosis sütununu ayır
y = data1['Diagnosis']

# Bağımsız değişkenler (X) olarak belirtilen sütunları kullan
X = data1[['Age', 'Gender', 'BMI', 'Blood Pressure', 'FBS', 'HbA1c', 'Family History of Diabetes', 'Smoking', 'Diet', 'Exercise']]

# Veri setini eğitim ve test setlerine ayır
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# KNN modelini eğit
knn = KNeighborsClassifier(n_neighbors=4)
knn.fit(X_train, y_train)

# Test seti üzerinde tahmin yap
tahmin = knn.predict(X_test)

# KNN modelinin doğruluğunu hesapla
score = knn.score(X_test, y_test)
print("KNN Model Accuracy:", score)

# Yeni bir veri noktası üzerinde tahmin yap
yeni_veri = [[45, 0, 28.5, 2, 120, 6.2, 0, 1, 0, 0]]  # Örnek veri noktası
tahmin = knn.predict(yeni_veri)

# Tahmin sonucunu "Diyabet" veya "Değil" olarak yazdır
sonuc = "Diyabet" if tahmin[0] == 1 else "Değil"
print("Tahmin Sonucu:", sonuc)

# Kadın ve erkek sayısını hesapla
cinsiyet_sayisi = data1['Gender'].value_counts()
print("Kadın Sayısı:", cinsiyet_sayisi[1])
print("Erkek Sayısı:", cinsiyet_sayisi[0])

# Pozitif ve negatif teşhis edilen kişi sayısını hesapla
teşhis_sayisi = data1['Diagnosis'].value_counts()
print("Pozitif Teşhis Edilen Kişi Sayısı:", teşhis_sayisi[1])
print("Negatif Teşhis Edilen Kişi Sayısı:", teşhis_sayisi[0])

# Diyabet teşhisi konulan kadın ve erkek sayısını hesapla
diyabet_kadin = data1[(data1['Gender'] == 1) & (data1['Diagnosis'] == 1)].shape[0]
diyabet_erkek = data1[(data1['Gender'] == 0) & (data1['Diagnosis'] == 1)].shape[0]
print("Diyabet Teşhisi Konulan Kadın Sayısı:", diyabet_kadin)
print("Diyabet Teşhisi Konulan Erkek Sayısı:", diyabet_erkek)